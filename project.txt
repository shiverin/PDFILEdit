Step 6: Creating the README.md
When preparing your README, ensure it includes:

A detailed description of your project, what it does, and why itâ€™s impactful.

The technologies you used and any challenges you faced.

Installation instructions, if applicable.

Any external libraries or APIs you utilized.


        <script>
            window.onbeforeunload = function() {
                navigator.sendBeacon("/clearall");
            };
        </script>


def cleanup_old_files(user_id):
    # Define the folder where user PDFs are stored
    user_folder = os.path.join('static', user_id)

    # Check if the user folder exists
    if not os.path.exists(user_folder):
        print(f"Error: Folder for user {user_id} does not exist.")
        return {"status": "error", "message": "User folder does not exist."}

    # List all files in the user folder
    files = os.listdir(user_folder)

    # Loop through all files and check their last modified time
    for file in files:
        file_path = os.path.join(user_folder, file)

        # Skip directories and non-PDF files
        if os.path.isdir(file_path):
            continue

        # Get the last modified time of the file
        file_mod_time = os.path.getmtime(file_path)

        # Check if the file is older than the expiration time
        if time.time() - file_mod_time > EXPIRATION_TIME:
            try:
                os.remove(file_path)  # Delete the file if it's expired
                print(f"Deleted old file: {file_path}")
            except Exception as e:
                print(f"Error deleting file {file_path}: {e}")

    return {"status": "success", "message": f"Old files for user {user_id} cleaned up successfully."}


def cleanup_all_users():
    # Get the list of all user folders (subdirectories) inside 'static'
    user_folders = [folder for folder in os.listdir('static') if os.path.isdir(os.path.join('static', folder))]

    # Iterate over each user folder and clean up old files
    for user_id in user_folders:
        result = cleanup_old_files(user_id)
        print(f"Cleanup result for {user_id}: {result['message']}")

    return {"status": "success", "message": "Old files cleaned up for all users."}

    function handleFileUpload(event) {
        const file = event.target.files[0];
        if (file && file.type === "application/pdf") {
            const fileReader = new FileReader();
            fileReader.onload = function (e) {
                const loadingTask = pdfjsLib.getDocument(e.target.result);
                loadingTask.promise.then((pdf) => {
                    renderPDF(pdf);
                });
            };
            fileReader.readAsArrayBuffer(file);
        } else {
            alert("Please upload a valid PDF file.");
        }
    }
